(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{308:function(t,s,a){t.exports=a.p+"assets/img/1.2c388fd0.png"},309:function(t,s,a){t.exports=a.p+"assets/img/2.be3f2e72.png"},310:function(t,s,a){t.exports=a.p+"assets/img/3.7f737e5e.png"},311:function(t,s,a){t.exports=a.p+"assets/img/4.d771774c.png"},437:function(t,s,a){"use strict";a.r(s);var e=a(21),n=Object(e.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"持续集成-continuous-integration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#持续集成-continuous-integration","aria-hidden":"true"}},[t._v("#")]),t._v(" 持续集成 Continuous Integration "),e("Badge",{attrs:{text:"@SpencerWoo"}}),t._v(" "),e("Badge",{attrs:{text:"Finish"}})],1),t._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("利用 Travis CI 将 Hexo 持续集成部署到 GitHub Pages. 👷")]),t._v(" "),e("p",[t._v("（当你觉得有必要提高部署效率时，才使用 CI。萌新可略过。）")])]),t._v(" "),e("h2",{attrs:{id:"什么是持续集成？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是持续集成？","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是持续集成？")]),t._v(" "),e("blockquote",[e("p",[t._v("持续集成（英语：Continuous integration，缩写 CI）是一种软件工程流程，是将所有软件工程师对于软件的工作副本持续集成到共享主线（mainline）的一种举措。")])]),t._v(" "),e("p",[t._v("简单来说，我们通过持续集成，能够简化 Hexo 发布博客的步骤，即：将清除缓存 "),e("code",[t._v("hexo clean")]),t._v("，生成静态文件 "),e("code",[t._v("hexo generate")]),t._v(" 和部署到 GitHub Pages "),e("code",[t._v("hexo deploy")]),t._v(" 这些步骤通过持续集成工具来帮助我们自动执行。")]),t._v(" "),e("p",[t._v("这样我们在本地对博客文件进行修改、新增博文内容或者新增博客文章，只需要通过 "),e("code",[t._v("git")]),t._v(" 推送到 GitHub 仓库之后，持续集成工具就可以帮助我们在线构建博客静态文件并直接部署到 GitHub Pages。这之后，我们发布博客内容就不需要本地三步走了。")]),t._v(" "),e("p",[e("strong",[t._v("👷 本章我们所利用的持续集成平台是 Travis CI.")])]),t._v(" "),e("h2",{attrs:{id:"注册-travis-ci-账号，绑定-github-账户"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注册-travis-ci-账号，绑定-github-账户","aria-hidden":"true"}},[t._v("#")]),t._v(" 注册 Travis CI 账号，绑定 GitHub 账户")]),t._v(" "),e("p",[t._v("首先，我们到 "),e("a",{attrs:{href:"https://travis-ci.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Travis CI"),e("OutboundLink")],1),t._v(" 官网，用自己的 GitHub 账户直接关联登录，并允许 Travis CI 查看自己的公有仓库。")]),t._v(" "),e("p",[t._v("然后我们到 "),e("a",{attrs:{href:"https://travis-ci.org/account/repositories",target:"_blank",rel:"noopener noreferrer"}},[t._v("Travis CI 账户页面"),e("OutboundLink")],1),t._v(" 开启我们的博客仓库。如图。")]),t._v(" "),e("p",[e("img",{attrs:{src:a(308),alt:""}})]),t._v(" "),e("h2",{attrs:{id:"配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置文件")]),t._v(" "),e("h3",{attrs:{id:"配置本地和远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置本地和远程仓库","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置本地和远程仓库")]),t._v(" "),e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("警告")]),t._v(" "),e("p",[t._v("由于 GitHub Pages 的限制，每个人的默认博客仓库 "),e("code",[t._v("xxx.github.io")]),t._v(" 只允许将静态文件托管在仓库的 master 分支。")])]),t._v(" "),e("p",[t._v("为了方便下面步骤的进行，我们进行这样的配置：")]),t._v(" "),e("ul",[e("li",[t._v("备份博客源文件")]),t._v(" "),e("li",[t._v("在本地仓库创建 "),e("code",[t._v("hexo")]),t._v(" 分支")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 克隆项目到本地")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/xxx/xxx.github.io.git\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建并切换到 hexo 分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b hexo\n")])])]),e("ul",[e("li",[t._v("在 "),e("code",[t._v("hexo")]),t._v(" 分支保存博客项目的源代码\n"),e("ul",[e("li",[t._v("将 "),e("code",[t._v("hexo")]),t._v(" 分支下的文件除 "),e("code",[t._v(".git")]),t._v(" 目录外全部删除")]),t._v(" "),e("li",[t._v("将博客源码文件拷贝到该目录下，并提交 Commit 到 "),e("code",[t._v("hexo")]),t._v(" 分支.")])])]),t._v(" "),e("li",[t._v("将本地 "),e("code",[t._v("hexo")]),t._v(" 分支内容提交到 GitHub 远程仓库")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交本地 hexo 分支到远程仓库的 hexo 分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin hexo:hexo\n")])])]),e("p",[t._v("经过这样的配置，我们博客仓库项目文件应该是这样的：")]),t._v(" "),e("ul",[e("li",[t._v("在 "),e("code",[t._v("hexo")]),t._v(" 分支保存博客项目的源代码")]),t._v(" "),e("li",[t._v("在 "),e("code",[t._v("master")]),t._v(" 分支保持项目的静态文件（即 "),e("code",[t._v("public")]),t._v(" 文件夹下的内容）")])]),t._v(" "),e("h3",{attrs:{id:"配置持续集成文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置持续集成文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置持续集成文件")]),t._v(" "),e("p",[e("code",[t._v(".travis.yml")]),t._v(" 是 Travis CI 的部署配置文件，Travis CI 部署时会自动读取我们每次 Commit 中是否包含 "),e("code",[t._v(".travis.yml")]),t._v("，有此文件才会开始部署。")]),t._v(" "),e("h4",{attrs:{id:"创建-travis-yml-配置文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建-travis-yml-配置文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建 "),e("code",[t._v(".travis.yml")]),t._v(" 配置文件")]),t._v(" "),e("p",[t._v("在博客项目源代码分支下（"),e("code",[t._v("hexo")]),t._v(" 分支）创建文件 "),e("code",[t._v(".travis.yml")]),t._v("，并添加如下内容：")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("language")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" node_js "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 编译语言、环境")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("sudo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" required "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要管理员权限")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("dist")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" xenial "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定 CI 系统版本为 Ubuntu16.04 LTS")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("node_js")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" stable "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Node.js 版本")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branches")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("only")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" hexo "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只有hexo分支检出更改才触发CI")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("before_install")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" export TZ='Asia/Shanghai' "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#配置时区为东八区UTC+8")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" npm install hexo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("cli "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装 hexo")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  - sudo apt-get install libpng16-dev # 安装 libpng16-dev CI编译出现相关报错时请取消注释")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("install")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" npm install "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装依赖")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行脚本，清除缓存，生成静态文件")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" hexo clean\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" hexo generate\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("deploy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("provider")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" pages\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("skip_cleanup")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true ")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 跳过清理")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("local_dir")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" public "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 需要推送到Github的静态文件目录 ")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $GIT_NAME "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用户名变量")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("email")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $GIT_EMAIL "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用户邮箱变量")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("github_token")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $GITHUB_TOKEN "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# GitHub Token变量")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("keep-history")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true ")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 保持推送记录，以增量提交的方式")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("target-branch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" master "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 推送的目标分支 local_dir->>master分支")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("branch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hexo "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 工作分支")]),t._v("\n")])])]),e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("警告")]),t._v(" "),e("ul",[e("li",[t._v("其他文档可能提到了利用 "),e("code",[t._v("hexo-deployer-git")]),t._v(" 进行部署，但是由于 Travis CI 本身支持直接部署到 GitHub Pages 的工具，因此无需另行安装 "),e("code",[t._v("hexo-deployer-git")]),t._v(" 了；")]),t._v(" "),e("li",[t._v("其他文档也可能提到在 "),e("code",[t._v(".travis.yml")]),t._v(" 中加入如下内容，来缓存 "),e("code",[t._v("node_modules")]),t._v(" 下的内容，从而加快编译速度。但是经过我的尝试，"),e("code",[t._v("node_modules")]),t._v(" 经常会由于没有及时更新，在添加其他组件之后出现「博客生成静态文件步骤」失败的情况，因此建议不进行缓存处理。")])]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cache")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("directories")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" node_modules\n")])])])]),t._v(" "),e("h4",{attrs:{id:"在-travis-ci-中配置变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在-travis-ci-中配置变量","aria-hidden":"true"}},[t._v("#")]),t._v(" 在 Travis CI 中配置变量")]),t._v(" "),e("p",[t._v("在配置文件中我们使用了三个变量：")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("$GIT_NAME")]),t._v("："),e("code",[t._v("git")]),t._v(" 用户名")]),t._v(" "),e("li",[e("code",[t._v("$GIT_EMAIL")]),t._v("："),e("code",[t._v("git")]),t._v(" 用户邮箱")]),t._v(" "),e("li",[e("code",[t._v("$GITHUB_TOKEN")]),t._v("：GitHub 通行证 (token) 字符串")])]),t._v(" "),e("p",[t._v("其中前两项可以通过在本地终端中这样查看：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email\n")])])]),e("p",[t._v("如下图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(309),alt:""}})]),t._v(" "),e("p",[t._v("最后一项 GitHub 通行证 (token) 我们在 GitHub 中进行申请：")]),t._v(" "),e("ul",[e("li",[t._v("访问 "),e("a",{attrs:{href:"https://github.com/settings/tokens",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub 账户设置 > Tokens"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("生成新 Token: Generate new token")]),t._v(" "),e("li",[t._v("填入 Token 描述，并给予 Token 第一项 "),e("code",[t._v("repo")]),t._v(" 的全部权限")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(310),alt:""}})]),t._v(" "),e("ul",[e("li",[t._v("将生成的 Token 复制，保存（生成 Token 的页面只有一次机会看见，请保存妥当。）")])]),t._v(" "),e("p",[t._v("在 Travis CI 仓库配置中，将三个变量填入设置（位于 "),e("code",[t._v("Settings > Environment Variables")]),t._v(" 处并保存：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(311),alt:""}})]),t._v(" "),e("h2",{attrs:{id:"自动部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动部署","aria-hidden":"true"}},[t._v("#")]),t._v(" 自动部署")]),t._v(" "),e("p",[t._v("经过以上步骤的配置，发布博客的命令就变更为：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到 hexo 分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout hexo\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交新博文")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" add "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Publish new post."')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 推送到远程仓库")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])]),e("p",[t._v("这样，在每次我们将博客的源文件通过 "),e("code",[t._v("git")]),t._v(" 推送到 GitHub 的 "),e("code",[t._v("hexo")]),t._v(" 分支上后，Travis CI 就会自动检测并主动开始构建我们的博客静态文件，并自动部署到 GitHub Pages 中。")]),t._v(" "),e("p",[t._v("除了方便部署，我们同时还在 GitHub 上面成功开启了我们博客源代码的备份，一箭双雕。👷")])])},[],!1,null,null,null);s.default=n.exports}}]);